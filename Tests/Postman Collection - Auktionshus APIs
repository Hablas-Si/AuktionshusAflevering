{
	"info": {
		"_postman_id": "90de6ef6-a206-4886-82d3-b47d00e13454",
		"name": "Auktionshus API tests",
		"description": "Collection of API tests for 4. semester project of group Hablas Si#",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35140627",
		"_collection_link": "https://warped-spaceship-340900.postman.co/workspace/Personal-Workspace~dabc11b0-b657-4f21-b9ad-ae1af56f39fd/collection/23289763-90de6ef6-a206-4886-82d3-b47d00e13454?action=share&source=collection_link&creator=35140627"
	},
	"item": [
		{
			"name": "AuthService",
			"item": [
				{
					"name": "Login (til legal request)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"jwtTokenUser\", jsonData.token);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"JohnDoe\",  \r\n    \"Password\": \"secret123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/login",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"login"
							]
						},
						"description": "Tests for a valid body (username & password) for /loginUser endpoint"
					},
					"response": []
				},
				{
					"name": "LoginUser - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"jwtTokenUser\", jsonData.token);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has a token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"    pm.environment.set(\"authToken\", jsonData.token);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should be a non-empty string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a valid JWT\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var token = jsonData.token;\r",
									"    var parts = token.split('.');\r",
									"    pm.expect(parts.length).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"Peter\",  \r\n    \"Password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/loginUser",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"loginUser"
							]
						},
						"description": "Tests for a valid body (username & password) for /loginUser endpoint"
					},
					"response": []
				},
				{
					"name": "LoginUser - Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for at tjekke, at statuskoden er 401 for ugyldigt password\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"// Test for at tjekke, at responsen indeholder 'title' med v√¶rdien 'Unauthorized'\r",
									"pm.test(\"Response contains 'Unauthorized' title\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"title\", \"Unauthorized\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"\",  \r\n    \"Password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/loginUser",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"loginUser"
							]
						},
						"description": "Tests for wrong login details (wrong password)"
					},
					"response": []
				},
				{
					"name": "LoginUser - Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 400\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test that the response contains error message for missing username\r",
									"pm.test(\"Response contains 'Missing password' error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"errors\");\r",
									"    pm.expect(jsonData.errors).to.have.property(\"login\");\r",
									"    pm.expect(jsonData.errors.login).to.include(\"The login field is required.\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"Peter\",  \r\n    \"Password\":\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/loginUser",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"loginUser"
							]
						},
						"description": "Tests for missing/empty password"
					},
					"response": []
				},
				{
					"name": "LoginUser - Missing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 400\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test that the response contains error message for missing username\r",
									"pm.test(\"Response contains 'Missing username' error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"errors\");\r",
									"    pm.expect(jsonData.errors).to.have.property(\"login\");\r",
									"    pm.expect(jsonData.errors.login).to.include(\"The login field is required.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\":,  \r\n    \"Password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/loginUser",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"loginUser"
							]
						},
						"description": "Tests for missing/empty username"
					},
					"response": []
				},
				{
					"name": "LoginAdmin - Valid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Sets the jwtTokenAdmin that we call for in a pre-request script for every test",
									"var jsonData = pm.response.json();",
									"pm.globals.set(\"jwtTokenAdmin\", jsonData.token);",
									"",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has a token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"token\");",
									"    pm.environment.set(\"authToken\", jsonData.token);",
									"});",
									"",
									"pm.test(\"Token is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should be a non-empty string\");",
									"});",
									"",
									"pm.test(\"Token is a valid JWT\", function () {",
									"    var jsonData = pm.response.json();",
									"    var token = jsonData.token;",
									"    var parts = token.split('.');",
									"    pm.expect(parts.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"Content-Type header is application/json\", function () {",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"admin\",  \r\n    \"Password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/loginAdmin",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"loginAdmin"
							]
						},
						"description": "Tests for valid login information for an Admin user at /loginAdmin"
					},
					"response": []
				},
				{
					"name": "LoginAdmin - Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 401",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"// Test that the response contains 'Unauthorized' title",
									"pm.test(\"Response contains 'Unauthorized' title\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"title\", \"Unauthorized\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"admin\",  \r\n    \"Password\": \"WrongPassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/loginAdmin",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"loginAdmin"
							]
						},
						"description": "Tests for invalid login input for loginAdmin (wrong password)"
					},
					"response": []
				},
				{
					"name": "LoginAdmin - Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test that the response contains error message for missing username",
									"pm.test(\"Response contains 'Missing password' error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\");",
									"    pm.expect(jsonData.errors).to.have.property(\"login\");",
									"    pm.expect(jsonData.errors.login).to.include(\"The login field is required.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"admin\",\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/loginAdmin",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"loginAdmin"
							]
						},
						"description": "Tests for missing/empty password"
					},
					"response": []
				},
				{
					"name": "LoginAdmin - Missing Username",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 400",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"// Test that the response contains error message for missing username",
									"pm.test(\"Response contains 'Missing username' error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property(\"errors\");",
									"    pm.expect(jsonData.errors).to.have.property(\"login\");",
									"    pm.expect(jsonData.errors.login).to.include(\"The login field is required.\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\":,\r\n    \"Password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/loginAdmin",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"loginAdmin"
							]
						},
						"description": "Tests for missing/empty username"
					},
					"response": []
				}
			],
			"description": "API endpoint tests for AuthService - LoginUser and LoginAdmin endpoints."
		},
		{
			"name": "UserService",
			"item": [
				{
					"name": "Authorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 200 (OK) when user is authorized\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test that the response contains the message \"You are authorized to access this resource.\"\r",
									"pm.test(\"Response contains authorization message\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"You are authorized to access this resource.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/User/authorized",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"User",
								"authorized"
							]
						},
						"description": "Tests for status OK 200 i the user with the current JWT token is authorized."
					},
					"response": []
				},
				{
					"name": "RegisterUser valid (random values)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									"\r",
									"// Generate a random string\r",
									"function generateRandomString(length) {\r",
									"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
									"    let result = '';\r",
									"    const charactersLength = characters.length;\r",
									"    for (let i = 0; i < length; i++) {\r",
									"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
									"    }\r",
									"    return result;\r",
									"}\r",
									"\r",
									"// Generate random user data\r",
									"const randomUsername = 'user_' + generateRandomString(8);\r",
									"const randomPassword = 'pass_' + generateRandomString(8);\r",
									"const randomEmail = 'user_' + generateRandomString(8) + '@example.com';\r",
									"\r",
									"// Set the random values as environment variables\r",
									"pm.environment.set('randomUsername', randomUsername);\r",
									"pm.environment.set('randomPassword', randomPassword);\r",
									"pm.environment.set('randomEmail', randomEmail);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 200 (OK) when user is created\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test that the response contains the message \"User created\"\r",
									"pm.test(\"Response contains 'User created' message\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"User created\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"{{randomUsername}}\",\r\n  \"password\": \"{{randomPassword}}\",\r\n  \"role\": \"User\",\r\n  \"email\": \"{{randomEmail}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/User/register",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"User",
								"register"
							]
						},
						"description": "Registers a new User with random values, and tests for status 200 OK, and if there is given appropriate message for user created."
					},
					"response": []
				},
				{
					"name": "RegisterUser - User Already Exists",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 400 (Bad Request) when user already exists\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"// Test that the response contains the message \"User already exists\"\r",
									"pm.test(\"Response contains 'User already exists' message\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"User already exists\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"existinguser\",\r\n  \"password\": \"password\",\r\n  \"role\": \"User\",\r\n  \"email\": \"existinguser@example.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/User/register",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"User",
								"register"
							]
						},
						"description": "Attempts to create an already existing user, and tests to see if appropriate message is returned after it fails."
					},
					"response": []
				},
				{
					"name": "GetUser - Valid User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 200 (OK) when user is found\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test that the response contains user details\r",
									"pm.test(\"Response contains user details\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"username\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/User/getuser/{{validUserId}}",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"User",
								"getuser",
								"{{validUserId}}"
							]
						},
						"description": "Attempts to get a user from valid user id, and tests if the status is 200 (OK) and if proper user details is returned in the body."
					},
					"response": []
				},
				{
					"name": "GetUser - User Not Found",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 404 (Not Found)\r",
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"// Test that the response contains appropriate error message (optional)\r",
									"pm.test(\"Response contains 'Not Found' error\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"status\", 404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/User/getuser/{{invalidUserId}}",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"User",
								"getuser",
								"{{invalidUserId}}"
							]
						},
						"description": "Attempts to get a non-existing user, and tests to see if appropriate error message is returned when it fails."
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 204 (No Content) when user is updated\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Test for status code 404 (Not Found) when user is not found\r",
									"pm.test(\"Status code is 404 when user is not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"updateduser\",\r\n  \"password\": \"updatedpassword\",\r\n  \"role\": \"User\",\r\n  \"email\": \"updateduser@example.com\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/User/updateuser/{{userIdForUpdate}}",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"User",
								"updateuser",
								"{{userIdForUpdate}}"
							]
						},
						"description": "The second test is meant to fail, tests for error 404 if the user id doesnt exist"
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 204 (No Content) when user is deleted\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Test for status code 404 (Not Found) when user is not found\r",
									"pm.test(\"Status code is 404 when user is not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/User/deleteuser/ed740539-de35-451a-9281-f2ab1cbc0244",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"User",
								"deleteuser",
								"ed740539-de35-451a-9281-f2ab1cbc0244"
							]
						},
						"description": "The 1st test is meant to fail, user id doesnt exist."
					},
					"response": []
				},
				{
					"name": "ValidateUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 200 (OK) and valid user response\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test that the response contains 'true' for valid user\r",
									"pm.test(\"Response contains 'true' for valid user\", function () {\r",
									"    pm.expect(pm.response.json()).to.eql(true);\r",
									"});\r",
									"\r",
									"// Test for invalid user\r",
									"pm.test(\"Response contains 'false' for invalid user\", function () {\r",
									"    pm.expect(pm.response.json()).to.eql(false);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"validuser\",\r\n  \"password\": \"validpassword\",\r\n  \"role\": \"User\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/User/login/validate",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"User",
								"login",
								"validate"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				}
			],
			"description": "All API testsfor UserService"
		},
		{
			"name": "Catalog",
			"item": [
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Catalog/all",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Catalog",
								"all"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "GetSpecific",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"username\": \"validuser\",\r\n  \"password\": \"validpassword\",\r\n  \"role\": \"User\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Catalog/{{validCatalogId}}",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Catalog",
								"{{validCatalogId}}"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "CreateItem",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains created item data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('title', 'New Item');\r",
									"    pm.environment.set(\"validCatalogId\", jsonData.id);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Item from catalog\",\r\n    \"price\": 100,\r\n    \"description\": \"A new catalog item\",\r\n    \"productAvailable\": true,\r\n    \"seller\": \"The Mayor\" \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Catalog",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Catalog"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "UpdateItem",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains success message\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Catalog updated successfully.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Updated Item\",\r\n    \"price\": 150,\r\n    \"description\": \"An updated catalog item\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Catalog/{{validCatalogId}}",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Catalog",
								"{{validCatalogId}}"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "DeleteItem",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 204 (No Content) when user is deleted\r",
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"// Test for status code 404 (Not Found) when user is not found\r",
									"pm.test(\"Status code is 404 when catalog is not found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Catalog/{{invalidCatalogId}}",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Catalog",
								"{{invalidCatalogId}}"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				}
			]
		},
		{
			"name": "BiddingService",
			"item": [
				{
					"name": "GetBids",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:4000/api/Bidding/get/48bde22e-fa59-40fd-b06e-5153ceb81e73",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"Bidding",
								"get",
								"48bde22e-fa59-40fd-b06e-5153ceb81e73"
							]
						}
					},
					"response": []
				},
				{
					"name": "SubmitBid",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is 'Bud modtaget'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Bud modtaget\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"auctionID\": \"{{auctionID}}\",\r\n  \"userID\": \"some-user-id\",\r\n  \"bidAmount\": 150\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Bidding",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Bidding"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				}
			]
		},
		{
			"name": "AuctionService",
			"item": [
				{
					"name": "AuthorizedTestAdmin",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "GetSpecific",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "GetAuction test",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains auction data\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property('auctionID');\r",
									"    pm.expect(jsonData).to.have.property('start');\r",
									"    pm.expect(jsonData).to.have.property('end');\r",
									"    pm.expect(jsonData).to.have.property('item');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Updated Item\",\r\n    \"price\": 150,\r\n    \"description\": \"An updated catalog item\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Auction",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Auction"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "CreateAuction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is 'Auction submitted successfully'\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Auction submitted successfully\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"item\": \"ee67f99f-b7ca-484b-ab42-9a511b6bf4a3\",\r\n  \"start\": \"2024-06-01T00:00:00Z\",\r\n  \"end\": \"2024-06-10T00:00:00Z\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Auction",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Auction"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "GetAll",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{BASEURL}}/api/Auction/all",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Auction",
								"all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LegalService",
			"item": [
				{
					"name": "legal/auctions",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{BASEURL}}/api/Legal/auctions",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Legal",
								"auctions"
							]
						}
					},
					"response": []
				},
				{
					"name": "legal/auctions/{auctionId}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{BASEURL}}/api/Legal/auctions/29b47799-76ab-4a6a-bde3-d8e4c0ed0f43",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Legal",
								"auctions",
								"29b47799-76ab-4a6a-bde3-d8e4c0ed0f43"
							]
						}
					},
					"response": []
				},
				{
					"name": "legal/users/{userid}",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{BASEURL}}/api/Legal/users/d5b61de5-2940-4b5d-97d1-2bb2b5bddcd7",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Legal",
								"users",
								"d5b61de5-2940-4b5d-97d1-2bb2b5bddcd7"
							]
						}
					},
					"response": []
				},
				{
					"name": "authorizedTest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{BASEURL}}/api/Legal/authorized",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Legal",
								"authorized"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "EmailService",
			"item": []
		},
		{
			"name": "Addresser til Vault og loki",
			"item": [
				{
					"name": "Vault UI",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Grafana",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3000/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Rabbitmq",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "user\r\nuser",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:15672/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "15672",
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "End-to-End test Create Auction",
			"item": [
				{
					"name": "LoginAdmin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Sets the jwtTokenAdmin that we call for in a pre-request script for every test\r",
									"var jsonData = pm.response.json();\r",
									"pm.globals.set(\"jwtTokenAdmin\", jsonData.token);\r",
									"\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has a token\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"token\");\r",
									"    pm.environment.set(\"authToken\", jsonData.token);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should be a non-empty string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a valid JWT\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var token = jsonData.token;\r",
									"    var parts = token.split('.');\r",
									"    pm.expect(parts.length).to.eql(3);\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type header is application/json\", function () {\r",
									"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"Username\": \"admin\",  \r\n    \"Password\": \"admin\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/AuthManager/loginAdmin",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"AuthManager",
								"loginAdmin"
							]
						},
						"description": "Tests for a valid body (username & password) for /loginUser endpoint"
					},
					"response": []
				},
				{
					"name": "Authorized",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Test for status code 200 (OK) when user is authorized\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test that the response contains the message \"You are authorized to access this resource.\"\r",
									"pm.test(\"Response contains authorization message\", function () {\r",
									"    pm.expect(pm.response.text()).to.eql(\"You are authorized to access this resource.\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/User/authorized",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"User",
								"authorized"
							]
						},
						"description": "Tests for status OK 200 i the user with the current JWT token is authorized."
					},
					"response": []
				},
				{
					"name": "GetAll Catalog Items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response is an array\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.be.an('array');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Catalog/all",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Catalog",
								"all"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "CreateItem",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Assuming the response body contains the created item with an \"id\" field\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Check if the id field is present in the response\r",
									"if (response && response.id) {\r",
									"    // Set the id in the environment variable\r",
									"    pm.environment.set(\"createdItemId\", response.id);\r",
									"    console.log(\"Item ID saved in environment variable: \", response.id);\r",
									"} else {\r",
									"    console.error(\"ID field not found in response\");\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"The brand new test\",\r\n    \"price\": 139,\r\n    \"description\": \"A BRAND new test just dropped\",\r\n    \"productAvailable\": true,\r\n    \"seller\": \"To whom it may concern\" \r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Catalog",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Catalog"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "CreateAuction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate the response status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse the JSON response body\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response contains auction ID\", function () {\r",
									"    pm.expect(response).to.have.property(\"id\");\r",
									"});\r",
									"\r",
									"// Check if the response contains the auction ID and set it in the environment variable\r",
									"if (response.id) {\r",
									"    pm.environment.set(\"createdAuctionId\", response.id);\r",
									"    console.log(\"createdAuctionId has been set to: \" + response.id);\r",
									"} else {\r",
									"    console.error(\"auction ID not found in the response.\");\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"start\": \"2024-05-27T00:00:00\",\r\n    \"end\": \"2024-06-27T00:00:00\",\r\n    \"item\": \"{{createdItemId}}\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Auction",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Auction"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "GetSpecific Auction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{BASEURL}}/api/Auction/{{createdAuctionId}}",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Auction",
								"{{createdAuctionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "SubmitBid on the Auction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response contains expected data\", function () {\r",
									"\r",
									"    // Kontrollerer at responsen er en gyldig JSON\r",
									"    pm.response.to.be.json;\r",
									"\r",
									"    // Kontrollerer at responsen indeholder id-feltet\r",
									"    pm.expect(pm.response.json()).to.have.property('id');\r",
									"\r",
									"    // Kontrollerer at responsen indeholder bidOwner-feltet\r",
									"    pm.expect(pm.response.json()).to.have.property('bidOwner');\r",
									"\r",
									"    // Kontrollerer at responsen indeholder amount-feltet\r",
									"    pm.expect(pm.response.json()).to.have.property('amount');\r",
									"\r",
									"    // Kontrollerer at responsen indeholder auction-feltet\r",
									"    pm.expect(pm.response.json()).to.have.property('auction');\r",
									"\r",
									"    // Kontrollerer at responsen indeholder accepted-feltet\r",
									"    pm.expect(pm.response.json()).to.have.property('accepted');\r",
									"\r",
									"    // Kontrollerer at responsen indeholder created-feltet\r",
									"    pm.expect(pm.response.json()).to.have.property('created');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Auction\": \"{{createdAuctionId}}\",\r\n  \"BidOwner\": \"BrandNewTestTester\",\r\n  \"Amount\": 200\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{BASEURL}}/api/Bidding",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Bidding"
							]
						},
						"description": "Attempts to validate a user based on user details in body, tests for status 200 (OK) and if response is true for a valid user, or false for a invalid user."
					},
					"response": []
				},
				{
					"name": "GetBids from the Auction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtToken = pm.globals.get(\"jwtTokenAdmin\");\r",
									"console.log(\"Using JWT Token: \", jwtToken); // This will log the token to the Postman Console (CTRL + ALT + C to open)\r",
									"pm.request.headers.add({ key: \"Authorization\", value: \"Bearer \" + jwtToken });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{BASEURL}}/api/Bidding/get/{{createdAuctionId}}",
							"protocol": "http",
							"host": [
								"{{BASEURL}}"
							],
							"path": [
								"api",
								"Bidding",
								"get",
								"{{createdAuctionId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "This folder tests a commonly used workflow of creating new accounts and transferring funds between the two.\n\nBecause we expect all requests to succeed in this workflow, we have a **status check test** in the **folder-level Scripts tab**.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"//all requests in this folder should be valid",
							"pm.test(\"Folder-level status check\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		}
	]
}